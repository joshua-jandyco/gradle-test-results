plugins {
  id "com.gradle.plugin-publish" version "0.9.3"
  id "groovy"
  id "jacoco"
  id "maven-publish"
  id "nebula.integtest" version "3.0.3"
  id "org.ajoberstar.grgit" version "1.4.0-rc.1"
}

project.ext {
    longName = "Gradle Test Results Plugin"
    vcs = "github.com/joshua-jandyco/gradle-test-results"
    website = "https://${project.vcs}"
}

group "com.jandyco"
description  "Prints the summary of run, failed and skipped tests at the end of the build"
version "0.1.0"

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile ("org.spockframework:spock-core:1.0-groovy-2.4") {
         exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib:3.2.0'
}

facets {
    funcTest {
        parentSourceSet = 'main'
        testTaskName = 'funcTest'
    }
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
    reports {
        html.enabled true
    }
}

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        plugin(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.longName)
                root.appendNode('description', project.description)
                root.appendNode('url', project.website)
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode("scm")
                scm.appendNode('url', project.website)
                scm.appendNode('connection', "scm:${project.website}.git")
                scm.appendNode('developerConnection', "scm:git://${project.vcs}.git")

                def license = root.appendNode("licenses").appendNode("license")
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

pluginBundle {
    website = project.website
    vcsUrl = project.website

    description = project.description
    tags = ["tests"]

    plugins {
        testResultsPlugin {
            id = "${project.group}.${project.name}"
            displayName = project.longName
            version = project.version
        }
    }
}

import org.ajoberstar.grgit.Grgit

ext.repo = Grgit.open(rootDir)

task createTag {
    description = 'Creates repository tag with current project version.'
    ext.tagName = "v${project.version}"

    doLast {
        logger.quiet "Creating tag '$tagName'."

        // Remove potentially existing tag
        repo.tag.remove(names: [tagName])

        // Create tag
        repo.tag.add {
            name = tagName
            message = "Version ${project.version}"
        }
    }
}

task pushTag {
    description = 'Pushes tag to remote repository.'
    dependsOn createTag

    doLast {
        logger.quiet "Pushing tag '$createTag.tagName' to remote."

        repo.push {
            refsOrSpecs = [createTag.tagName]
        }
    }
}

task tag {
    dependsOn pushTag
    mustRunAfter publishPlugins
}

task release {
    description = 'Publishes artifacts to Gradle Plugin Portal and tags repository with current project version.'
    dependsOn assemble, publishPlugins, tag
}
